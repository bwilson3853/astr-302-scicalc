#!/usr/bin/env python
#
# A simple command-line scientific calculator.
#

import sys, math

def die_with_usage(message):
	print("\n****\n**** error: {}\n****\n".format(message), file=sys.stderr)
	print("usage:\n\n    {} <operator> [arg1 [arg2 [...]]]\n".format(sys.argv[0]), file=sys.stderr)
	print(", where <operator> can be one of:\n", file=sys.stderr)
	for (op, func) in operators.items():
		print("    {}: {}".format(op, func.__doc__), file=sys.stderr)
	print("", file=sys.stderr)
	exit(-1)

#
# The operators.
#
# These functions must take the necessary number of arguments, and return
# the result of the operation. They must have a short docstring explaining
# what they do (it will be printed by the die_with_usage() function).
#
# Exceptions:
#   - If an incorrect number of arguments is passed, the function must raise a TypeError.
#   - If there's a problem with argument values (e.g., a negative number passed to log),
#     the function must raise a ValueError.
#

def add(*args):
	"""Add a list of numbers"""

	sum = 0.0
	for arg in args:
		sum += arg
	return sum

def sub(*args):
	"""Subtract a list of numbers from an initial number"""
	"""All numbers after the first number given are subracted"""

	diff = args[0]
	for arg in args[1:]:
		diff -= arg
	return diff

# Take an number input and return the tangent value for that number
def tan(x):
	"""Return the tangent values of x degrees"""

	return math.tan(math.radians(x))

def mul(*args):
	"""Multiply a list of arguments"""

        # I could've implemented this similarly to 'add', but I
        # chose to show you some functional programming instead!
        # Read more at https://www.python-course.eu/lambda.php
	import functools
	return functools.reduce(lambda x, y: x*y, args)

def div(*args):
        """Divide a list of arguments."""

        quot = args[0] #First input is dividend
        for arg in args[1:]: #Each successive input is divisor rather than throwing IndexError exception
                quot /= arg
        return quot

def log10(x):
	"""Return a base-10 logarithm of x"""
	return math.log10(x)

def factorial(x):
	if x == 0:
		return 1   # factorial of 0 is 1
	else:              # otherwise it will calculate the factorial
		return x * factorial(x-1)

def root(x = 0, y = 2):
	"""Return the yth root of x (default: x=0, y=2)"""
	
	return x**(1/y)

def inverse(x):
    """Takes the inverse of any x other than zero"""
    inv = 1 / x    
    return inv

def sin(x):
	"""Return sine of x (x must be in degrees)"""

		# Converts x to radians and then takes sine of x.
	return math.sin(math.radians(x))

def cos(x):
	"""Takes x in degrees and returns the cosine value"""
	
	return math.cos(math.radians(x))

def mean(*args):
	"""Return mean float of list of numbers"""
		# `sum` is a built-in Python function that sums up all elements in a list
		# `len` is another built-in Python function that gives the length of a list
	return sum(args)/len(args)

def ln(x):
	"""Return a natural logarithm of x"""
	
	return math.log(x)

def square(x):
	"""Squares x"""

	return x**2

def exponent(x):
	"""Returns e^x"""

	import numpy as np
	return np.e**x

def tothe(*args):
	"""Returns 1st argument to the 2nd argument to the 3rd, etc"""

	import functools
	return functools.reduce(lambda x,y : x**y, args)

#
# The dictionary that maps the command-line name of the operation,
# to the function that performs it. There can be multiple names
# for the same operator (e.g., 'add' and 'sum').
#


operators = {
	'add': add,
	'sum': add,
	'sub': sub,
	'diff': sub,
	'mul': mul,
	'mean': mean,
  'div': div,
	'log10': log10,
	'tan': tan,
	'squared' : square,
	'square' : square,
	'^2' : square,
	'^' : tothe,
	'exp' : exponent,
	'ln': ln,
	'cos': cos,
	'sin': sin,
	'sine': sin,
  'inverse': inverse,
	'root': root,
	'fac': factorial,
}




if __name__ == "__main__":
	#
	# Collect and parse arguments
	#
	try:
		op = sys.argv[1]
		args = [ float(arg) for arg in sys.argv[2:] ]
	except IndexError:
		die_with_usage("Insufficient number of arguments.")
	except ValueError as e:
		die_with_usage(e)

	#
	# Run the requested operation, and print the result
	#
	try:
		print(operators[op](*args))
	except KeyError:
		die_with_usage("Unknown operator '{}'.".format(op))
	except TypeError as e:
		die_with_usage(e)
	except ValueError as e:
		die_with_usage(e)
